# flask basic server

from flask import Flask, jsonify
import load_dotenv
import os
import boto3
from botocore.exceptions import ClientError

load_dotenv.load_dotenv()

SECRET_KEY = os.getenv("S3_SECRET_KEY")
ACCESS_KEY = os.getenv("S3_ACCESS_KEY")
ENDPOINT = os.getenv("S3_ENDPOINT")
s3_client = boto3.client(
    "s3",
    aws_access_key_id=ACCESS_KEY,
    aws_secret_access_key=SECRET_KEY,
    endpoint_url=ENDPOINT,
    config=boto3.session.Config(signature_version="s3v4"),
    verify=False
)
app = Flask(__name__)

def create_presigned_url(bucket_name, object_name, expiration=3600):
    try:
        metadata = s3_client.head_object(Bucket=bucket_name, Key=object_name)
        if metadata:
            response = s3_client.generate_presigned_url('get_object',
                                                    Params={'Bucket': bucket_name,
                                                            'Key': object_name},
                                                    ExpiresIn=expiration)
        else:
            return None
    except ClientError as e:
        print(e)
        return None
    return response

@app.route('/')
def home():
    return "Hello World"

@app.route('/malware/<date>/<sha256>', methods=['GET'])
def getmalware(date, sha256):
    location = f"{date}/{sha256}"
    url = create_presigned_url("malwares", location, expiration=3600*5)
    if url:
        return f"<a href='{url}'>Download {sha256}</a>"
    return "Not Found"

@app.route('/api/malware/<date>/<sha256>', methods=['GET'])
def directdownload(date, sha256):
    location = f"{date}/{sha256}"
    url = create_presigned_url("malwares", location, expiration=3600*5)
    if url:
        return jsonify({"url": url})
    return "Not Found"
if __name__ == '__main__':
    app.run(debug=True)